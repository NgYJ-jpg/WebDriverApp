using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using System.Diagnostics;
using iText.Kernel.Pdf;
using iText.Layout;
using iText.IO;
using iText.Layout.Element;
using iText.Layout.Properties;
using iText.Kernel.Pdf.Canvas.Draw;

namespace MöbiusErgebnisDownload
{
    public partial class MobiusDownladExams : Form
    {
        public int i_sortname, i_mtknr;
        public bool gesamtlisteVorhanden = false, pdfVorhanden = false, pdfOpen = false;
        public string[] lines;
        public ChromeDriver driver;
        public MobiusDownladExams()
        {
            InitializeComponent();
        }

        private void B_StartWebBrowser_Click(object sender, EventArgs e)
        {
            var chromeOptions = new ChromeOptions();
            var downloadDirectory = Path.GetDirectoryName(oFD_Teilnehmer.FileName);
            chromeOptions.AddArguments("--browser.download.folderList=2");
            chromeOptions.AddArguments("--browser.helperApps.neverAsk.saveToDisk=image/jpg");
            chromeOptions.AddArguments("--browser.download.dir=" + downloadDirectory);

            chromeOptions.AddUserProfilePreference("profile.default_content_settings.popups", 0);
            chromeOptions.AddUserProfilePreference("download.prompt_for_download", "false");
            chromeOptions.AddUserProfilePreference("download.default_directory", downloadDirectory);
            chromeOptions.AddUserProfilePreference("plugins.plugins_disabled", new[] { "Chrome PDF Viewer" });


            driver = new ChromeDriver(chromeOptions);
            driver.Manage().Window.Position = new System.Drawing.Point(50, 50);
            driver.Manage().Window.Size = new System.Drawing.Size(1080*4/3, 1 * 1080);
            //driver.Manage().Window.Maximize();
            driver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(1);

            // Zu Testzwecken in folgenden Zeilen Kommentarzeichen entfernen und auf aktuelle Gegebenheiten anpassen

            //driver.Navigate().GoToUrl("https://exam-h-da.mobius.cloud/rest/saml/init-login");
            //IntPtr handle = GetForegroundWindow();
            ////System.Threading.Thread.Sleep(1000);
            //var user_login = driver.FindElement(By.Id("username"));
            //var user_pass = driver.FindElement(By.Id("password"));
            //user_login.SendKeys("");
            //user_pass.SendKeys("");
            //driver.FindElement(By.Name("_eventId_proceed")).Click();
            //driver.Navigate().GoToUrl("https://exam-h-da.mobius.cloud/7/gradebook");


            //if (!driver.FindElement(By.Id("showUid")).Selected)
            //{
            //    driver.FindElement(By.Id("showUid")).Click();
            //}
            //if (driver.FindElement(By.Id("showLastName")).Selected)
            //{
            //    driver.FindElement(By.Id("showLastName")).Click();
            //}
            //if (driver.FindElement(By.Id("showGivenName")).Selected)
            //{
            //    driver.FindElement(By.Id("showGivenName")).Click();
            //}
            //driver.FindElement(By.Name("numberOfRows")).Clear();
            //driver.FindElement(By.Name("numberOfRows")).SendKeys("20000");
            //IWebElement select = driver.FindElement(By.Id("assignmentSelection"));
            //select.SendKeys("Modulprüfung Strömungsmechanik (2021 SS) - Hausaufgabe/Quiz");
            //driver.FindElement(By.LinkText("Suche")).Click();
            if (gesamtlisteVorhanden&& b_StartWebBrowser.Enabled)
            {
                b_Download.Enabled = true;
                this.TopMost = true; ;
            }


        }

        private void MobiusDownladExams_FormClosing(object sender, FormClosingEventArgs e)
        {
            driver.Close();
            driver.Dispose();
        }

        private void b_Download_Click(object sender, EventArgs e)
        {
            IList<IWebElement> elements = driver.FindElement(By.CssSelector("table[class*='gradientTable']")).FindElements(By.CssSelector("tr[class*='dataRow']"));
            List<string> userIds = new List<string>();
            driver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(0);
            if (!gesamtlisteVorhanden)
            {
                fBD_Downloads.Description = "Download-Verzeichnis wählen";
                if (fBD_Downloads.ShowDialog() == DialogResult.OK)
                {
                    tB_Teilnehmer.Text = fBD_Downloads.SelectedPath;
                    tB_Teilnehmer.Refresh();
                }
            }

            foreach (IWebElement element in elements)
            {
                try
                {
                    string text = "https:/evaluation.mobius.cloud/gradebook/Details.do?" + element.FindElement(By.CssSelector("a[class='grade']")).GetAttribute("href").Split('\'')[3];
                    userIds.Add(element.FindElement(By.CssSelector("td[class*='top userInfo']")).Text + ";" + text);
                }
                catch {                string tttt = element.Text;
}   
            }

            int counter = 0;
            foreach (string id in userIds)
            {
                counter++;
                tB_Status.Text = "Bearbeite  Datensatz " + counter + " von " + userIds.Count;
                tB_Status.Refresh();
                Download(id);
            }

        }


        private void Download(string gradeId)
        {
            string fn="";
            string userId = gradeId.Split(';')[0];
            string gradeUrl = gradeId.Split(';')[1];


            try{
                driver.Navigate().GoToUrl(gradeUrl);
            }
            catch{ 
                MessageBox.Show("Invalid URL error.");
            }
            
            driver.FindElement(By.XPath("(//a[normalize-space()='Export to CSV'])[1]")).Click();


            

            dataCells = driver.FindElements(By.CssSelector("td[class='detailGradePanel']"));
            foreach (var item in dataCells)
            {
                jsDriver.ExecuteScript("arguments[0].style.visibility='collapse'", item);

            }
            IList<IWebElement> elements = driver.FindElements(By.CssSelector("tr[class*='qDetailRow']"));

            for (int i = 0; i < elements.Count; i++)
            {
                jsDriver.ExecuteScript("arguments[0].style.visibility='collapse'", elements[i].FindElement(By.CssSelector("td[class='details']")));
                jsDriver.ExecuteScript("arguments[0].style.visibility='collapse'", elements[i].FindElement(By.CssSelector("p[class='selectResponse']")));
                jsDriver.ExecuteScript("arguments[0].style.visibility='collapse'", elements[i].FindElement(By.CssSelector("table[class='qgInfoTable']")));

                IList<IWebElement> tableRows = elements[i].FindElement(By.CssSelector("table[class='qgTable']")).FindElements(By.TagName("tr"));
                foreach (IWebElement tableRow in tableRows)
                {
                    jsDriver.ExecuteScript("arguments[0].style.visibility='collapse'", tableRow);
                }
                jsDriver.ExecuteScript("arguments[0].style.visibility='visible'", tableRows[0]);

            }
            

            //driver.ExecuteScript("window.history.go(-2)");

        }

        [DllImport("user32.dll")]
        private static extern bool SetForegroundWindow(IntPtr hWnd);
        [DllImport("user32.dll")]

        private void B_Users_Click(object sender, EventArgs e)
        {
            if (oFD_Teilnehmer.ShowDialog() == DialogResult.OK)
            {
                tB_Teilnehmer.Text = oFD_Teilnehmer.FileName;
                gesamtlisteVorhanden = true;
                if (gesamtlisteVorhanden)
                {
                    b_StartWebBrowser.Enabled = true;
                    this.TopMost = true; ;
                }

            }

        }
    }
}
